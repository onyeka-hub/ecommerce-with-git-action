name: Build, Push, and Deploy Frontend Image to AWS
run-name: ${{ github.actor }} Build and Push Frontend Image to AWS ECR and ECS

# Trigger only when changes are made in the app/frontend directory for PR and there is a push 
# on the main branch.
on:
  push:
    branches: 
      - main
    paths:
      - 'app/frontend/**'
  pull_request:
    branches:
      - main
    paths: 
      - 'app/frontend/**'

env:
  AWS_REGION: eu-west-2
  ECS_CLUSTER: app_cluster
  CONTAINER_NAME: frontend
  ECS_SERVICE: app_service
  ECS_TD: .github/workflows/td-frontend.json

jobs:
  build-and-push:
    name: Build and Push to ECR and ECS
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install frontend dependencies
      run: npm install
      working-directory: app/frontend

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic tagging of releases
      id: increment-git-tag
      run: bash ./build/git_update.sh -v patch

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: capstone-ecommerce-frontend
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      working-directory: app/frontend

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      image: ${{ needs.build-and-push.outputs.image }}

    steps: 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-1
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TD }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-1.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
